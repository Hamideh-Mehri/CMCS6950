# -*- coding: utf-8 -*-
"""dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cc0Z5qEP6U-3Kmo57NhxJysuHqLpNZQ6
"""

import os
import itertools
import numpy as np

import mnist
import cifar


class Dataset(object):
    def __init__(self, datasource, path_data, **kwargs):
        self.datasource = datasource
        self.path_data = path_data
        self.rand = np.random.RandomState(9)
        if self.datasource == 'mnist':
            self.num_classes = 10
            self.dataset = mnist.read_data(os.path.join(self.path_data, 'mnist'))
        elif self.datasource == 'cifar-10':
            self.num_classes = 10
            self.dataset = cifar.read_data(os.path.join(self.path_data, 'cifar'))
        elif self.datasource == 'Raw_cifar':
             self.dataset = cifar.read_raw_data(os.path.join(self.path_data, 'cifar'))
        elif self.datasource == 'Raw_mnist':
             self.dataset = mnist.read_raw_data(os.path.join(self.path_data, 'mnist'))
        else:
            raise NotImplementedError
        self.split_dataset('train', 'val', int(self.dataset['train']['input'].shape[0] * 0.1),
            self.rand)
        self.num_example = {k: self.dataset[k]['input'].shape[0] for k in self.dataset.keys()}
        

    def split_dataset(self, source, target, number, rand):
        keys = ['input', 'label']
        indices = list(range(self.dataset[source]['input'].shape[0]))
        rand.shuffle(indices)
        ind_target = indices[:number]
        ind_remain = indices[number:]
        self.dataset[target] = {k: self.dataset[source][k][ind_target] for k in keys}
        self.dataset[source] = {k: self.dataset[source][k][ind_remain] for k in keys}