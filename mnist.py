# -*- coding: utf-8 -*-
"""mnist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iE8DM79Z31ijE2ZaI57Xi5I5xBrDpIlJ
"""

import os
import pandas as pd
import numpy as np

def read_data(path_dataset):
        trainpath = os.path.join(path_dataset, 'train.csv')
        testpath = os.path.join(path_dataset, 'test.csv')
        
        train = pd.read_csv(trainpath)
        test = pd.read_csv(testpath)
        
        train_images_raw = train.loc[:, train.columns != 'label']
        train_labels_raw = train['label']
        
        test_images_raw = test.loc[:, train.columns != 'label']
        test_labels_raw = test['label']
        
        #reshape images
        train_images = np.expand_dims((np.reshape(train_images_raw.to_numpy(), (-1,28,28))),3)
        train_labels = np.asarray(train_labels_raw)
        
        test_images = np.expand_dims((np.reshape(test_images_raw.to_numpy(), (-1,28,28))),3)
        test_labels = np.asarray(test_labels_raw)
        
        # Pre-processing (normalize)
        train_images = np.divide(train_images, 255, dtype=np.float32)
        test_images = np.divide(test_images, 255, dtype=np.float32)
        mean = np.mean(train_images)
        std = np.std(train_images)
        train_images = (train_images - mean) / std
        test_images = (test_images - mean) / std

        dataset = {
        'train': {'input': train_images, 'label': train_labels},
        'test': {'input': test_images, 'label': test_labels},
          }
        return dataset

def read_raw_data(path_dataset):
        trainpath = os.path.join(path_dataset, 'train.csv')
        testpath = os.path.join(path_dataset, 'test.csv')
        
        train = pd.read_csv(trainpath)
        test = pd.read_csv(testpath)
        
        train_images_raw = train.loc[:, train.columns != 'label']
        train_labels_raw = train['label']
        
        test_images_raw = test.loc[:, train.columns != 'label']
        test_labels_raw = test['label']
        
        # Pre-processing (normalize)
        train_images_raw = np.divide(train_images_raw, 255, dtype=np.float32)
        test_images_raw = np.divide(test_images_raw, 255, dtype=np.float32)
        mean = np.mean(train_images_raw)
        std = np.std(train_images_raw)
        train_images_raw = (train_images_raw - mean) / std
        test_images_raw = (test_images_raw - mean) / std
        dataset = {
        'train': {'input': train_images_raw, 'label': train_labels_raw},
        'test': {'input': test_images_raw, 'label': test_labels_raw},
          }
        return dataset
